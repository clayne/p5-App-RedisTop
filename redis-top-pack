#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"App/RedisTop.pm"} = <<'APP_REDISTOP';
  package App::RedisTop;
  use strict;
  use warnings;
  our $VERSION = '0.01';
  
  1;
  __END__
  
  =head1 NAME
  
  App::RedisTop - Redis resource statistics tool.
  
  =head1 DESCRIPTION
  
  Redis resource statistics tool.
  
  =head1 AUTHOR
  
  Tsuyoshi Torii E<lt>toritori0318(at)cpan.orgE<gt>
  
  =head1 SEE ALSO
  
  L<redis-top>
  
  =head1 THANKS TO
  
  hirose31
  
  fujiwara
  
  =head1 LICENSE
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =cut
APP_REDISTOP

$fatpacked{"App/RedisTop/Component.pm"} = <<'APP_REDISTOP_COMPONENT';
  package App::RedisTop::Component;
  use Term::ANSIColor qw/colored/;
  
  sub new {}
  sub stat_values {
      my ($self, $stat, $prev_stat) = @_;
      my @results;
      for my $row (@{$self->{items}}) {
          my $stat_key = ref $row->{stat_key} eq 'CODE' ? $row->{stat_key}->($stat->{redis_version}) : $row->{stat_key};
          my $value;
          if ($row->{diff}) {
              my $prev_uptime = $prev_stat->{uptime_in_seconds} || 0;
              my $prev_value  = $prev_stat->{$stat_key} || 0;
              eval {
                  $value
                      = ( $stat->{$stat_key} - $prev_value )
                      / ( $stat->{uptime_in_seconds} - $prev_uptime);
              };
              if ($@) {
                  $value = $stat->{$stat_key};
              }
          } else {
              $value = $stat->{$stat_key};
          }
          push @results, $value;
      }
      return @results;
  }
  
  sub unit {
      my ($self, $value) = @_;
      $value ||= 0;
  
      my $round = '';
      my @units = qw/K M G T P/;
      unshift @units, ' ';
      for my $unit (@units) {
          if($value / 1000 < 1) {
              $round = 2 if index($value, '.') > 0; # float
              return sprintf("%.${round}f%s", $value, $unit);
          }
          $value = $value / 1000;
          $round = 2;
      }
  }
  
  sub separator { colored("|", "blue") }
  
  sub header {
      my ($self) = @_;
      my $title = $self->{group};
      my $diff  = $self->component_width - length($title);
      my $left  = $diff / 2;
      my $right = $diff - $left;
  
      my $line     = '-' x $left . $title . '-' x $right;
      my $line_len = length($line);
      if($line_len > $self->component_width-1) {
          $line = substr($line, 0, length($line)-1);
      } elsif($line_len < $self->component_width-1) {
          $line .= '-';
      }
      return colored("${line} ", "blue");
  }
  
  sub sub_header {
      my ($self) = @_;
      my $format = "%" . $self->{width} . "s";
      my $line   = join(' ', map { sprintf($format, $_->{name}) } @{$self->{items}});
      return colored("${line}", "cyan") . $self->separator;
  }
  
  sub line {
      my ($self, $spt) = @_;
      my $item_len = scalar @{$self->{items}};
      my $line     = join(' ', map { $spt x $self->{width} } 1..$item_len);
      return colored("${line} ", "blue");
  }
  
  sub component_width {
      my ($self) = @_;
      my $line = $self->line('-');
      return length($self->colorstrip($self->line('-')));
  }
  
  sub colorstrip {
      my ($self, @string) = @_;
      for my $string (@string) {
          $string =~ s{ \e\[ [\d;]* m }{}xmsg;
      }
      return wantarray ? @string : join q{}, @string;
  }
  
  sub body {
      my ($self, $stat, $prev_stat) = @_;
      my @cols;
      for my $value ($self->stat_values($stat, $prev_stat)) {
          my $stat   = ($self->{unit}) ? $self->unit($value) : $value;
          my $format = ($self->{round}) ? "%" . $self->{width} . ".1f" : "%" . $self->{width} . "s" ;
          push @cols, sprintf($format, $stat);
      }
      my $line = join(' ', @cols);
      return $line . $self->separator;
  }
  
  sub average {
      my ($self, $values, $instance_count) = @_;
      $values ||= [ map { '' } @{$self->{items}} ];
  
      my @cols;
      for my $value (@$values) {
          my $avg_value = 0;
          $avg_value = $value / $instance_count if $value && $instance_count;
  
          my $stat   = ($self->{unit}) ? $self->unit($avg_value) : $avg_value;
          my $format = ($self->{round}) ? "%" . $self->{width} . ".1f" : "%" . $self->{width} . "s" ;
          push @cols, sprintf($format, $stat);
      }
      my $line = join(' ', @cols);
      return $line . $self->separator;
  }
  
  sub total {
      my ($self, $values) = @_;
  
      my @cols;
      for my $value (@$values) {
          my $stat = '';
          if($self->{total}){
              $stat = ($self->{unit}) ? $self->unit($value) : $value;
          }
          my $format = "%" . $self->{width} . "s";
          push @cols, sprintf($format, $stat);
      }
      my $line = join(' ', @cols);
      return $line . $self->separator;
  }
  
  1;
APP_REDISTOP_COMPONENT

$fatpacked{"App/RedisTop/Component/CPU.pm"} = <<'APP_REDISTOP_COMPONENT_CPU';
  package App::RedisTop::Component::CPU;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
      my $self = bless {
          group => 'cpu',
          items => [
              { name => 'sys', stat_key => 'used_cpu_sys',  diff => 1 },
              { name => 'usr', stat_key => 'used_cpu_user', diff => 1 },
          ],
          width => 6,
          round => 1,
          @_,
      }, $class;
  }
  
  1;
APP_REDISTOP_COMPONENT_CPU

$fatpacked{"App/RedisTop/Component/Command.pm"} = <<'APP_REDISTOP_COMPONENT_COMMAND';
  package App::RedisTop::Component::Command;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
  
      my $self = bless {
          group => 'command',
          items => [
              { name => 'total/s',  stat_key => 'total_commands_processed', diff => 1 },
              { name => 'hits/s',   stat_key => 'keyspace_hits',   diff => 1 },
              { name => 'misses/s', stat_key => 'keyspace_misses', diff => 1 },
          ],
          width => 8,
          unit  => 1,
          total => 1,
          @_,
      }, $class;
  }
  
  1;
APP_REDISTOP_COMPONENT_COMMAND

$fatpacked{"App/RedisTop/Component/Connection.pm"} = <<'APP_REDISTOP_COMPONENT_CONNECTION';
  package App::RedisTop::Component::Connection;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
  
      my $self = bless {
          group => 'conn',
          items => [
              { name => 'total/s',   stat_key => 'total_connections_received', diff => 1 },
              { name => 'clients',   stat_key => 'connected_clients', },
          ],
          width => 9,
          unit  => 1,
          total => 1,
          @_,
      }, $class;
  }
  
  1;
APP_REDISTOP_COMPONENT_CONNECTION

$fatpacked{"App/RedisTop/Component/DB.pm"} = <<'APP_REDISTOP_COMPONENT_DB';
  package App::RedisTop::Component::DB;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
  
      my $self = bless {
          group => 'db',
          items => [
              { name => 'keys',    stat_key => 'keys', },
              { name => 'expires', stat_key => 'expires', },
          ],
          width => 7,
          unit  => 1,
          total => 1,
          dbid  => 0,
          @_,
      }, $class;
      # set group name
      $self->{group} = $self->{group} . $self->{dbid};
      $self;
  }
  
  # override
  sub stat_values {
      my ($self, $stat) = @_;
      my @results;
      my $db_key = "db" . $self->{dbid};
      my $value  = $stat->{$db_key} || "keys=0,expires=0";
      my ($keys, $expires) = map {$_ =~ /keys=(\d+),expires=(\d+)/; $1, $2} ($value);
      return ($keys, $expires);
  }
  
  1;
APP_REDISTOP_COMPONENT_DB

$fatpacked{"App/RedisTop/Component/Memory.pm"} = <<'APP_REDISTOP_COMPONENT_MEMORY';
  package App::RedisTop::Component::Memory;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
  
      my $self = bless {
          group => 'mem',
          items => [
              { name => 'use',  stat_key => 'used_memory', },
              { name => 'rss',  stat_key => 'used_memory_rss', },
              { name => 'frag', stat_key => 'mem_fragmentation_ratio', },
          ],
          width => 7,
          unit  => 1,
          @_,
      }, $class;
  }
  
  1;
APP_REDISTOP_COMPONENT_MEMORY

$fatpacked{"App/RedisTop/Component/Save.pm"} = <<'APP_REDISTOP_COMPONENT_SAVE';
  package App::RedisTop::Component::Save;
  use base 'App::RedisTop::Component';
  sub new {
      my $class = shift;
  
      my $self = bless {
          group => 'save',
          items => [
              {
                  name     => 'changes',
                  stat_key => sub {
                      my $redis_version = shift;
                      return $redis_version =~ /^2\.4/
                          ? 'changes_since_last_save'
                          : 'rdb_changes_since_last_save';
                  },
              },
             ],
          width => 7,
          unit  => 1,
          total => 1,
          @_,
      }, $class;
  }
  
  1;
APP_REDISTOP_COMPONENT_SAVE

$fatpacked{"App/RedisTop/Perform.pm"} = <<'APP_REDISTOP_PERFORM';
  package App::RedisTop::Perform;
  use Term::ANSIColor qw/colored/;
  use List::Util qw/max/;
  
  my $version = eval {
      require App::RedisTop;
      $App::RedisTop::VERSION;
  };
  if($@) { $version = '?' }
  
  sub new {
      my $class = shift;
  
      my $self = bless {
          groups     => [],
          instances  => [],
          width      => 20,
          summary    => {},
          prev_stats => {},
          @_,
      }, $class;
      my $max_len = max (map { length($_) } @{$self->{instances}});
      $self->{width} = $max_len;
      $self;
  }
  
  sub separator { colored("|", "blue") }
  
  sub redis_info {
      my ($self, $host, $port, $pass) = @_;
  
      my $server = "$host:$port";
      my $s = IO::Socket::INET->new(
          PeerAddr => $server,
          Proto    => 'tcp',
      ) or die "[$server] socket connect error: $!";
  
      # auth
      if ($pass) {
          $s->print("AUTH $pass \r\n");
          <$s> || die "[$server] socket auth error: $!";
      }
  
      # info
      $s->print("INFO\r\n");
      my $count = <$s> || die "[$server] socket read error: $!";
      $s->read(my $buf, substr($count, 1) ) or die "[$server] socket read error: $!";
  
      my $stats = {};
      for my $row (split(/\r\n/, $buf)) {
          next if $row =~ /^#/;
          next if $row =~ /^$/;
          my ($key, $val) = split(/:/, $row);
          $stats->{$key} = $val;
      }
  
      close ($s);
  
      return $stats;
  }
  
  sub build_title {
      my @lines;
      push @lines, "\033[2J\n";
      push @lines, colored(sprintf("redis-top v%s\n\n", $version), "bold");
      return @lines;
  }
  
  sub build_header {
      my ($self) = @_;
      my $out_str = sprintf("%s ", ' ' x $self->{width});
      for my $group (@{$self->{groups}}) {
          $out_str .= $group->header;
      }
      return ("$out_str\n");
  }
  
  sub build_sub_header {
      my ($self) = @_;
      my $format = "%" . $self->{width} . "s%s";
      my $out_str = colored(sprintf($format, 'INSTANCE', $self->separator), "bold");
      for my $group (@{$self->{groups}}) {
          $out_str .= $group->sub_header;
      }
      return ("$out_str\n");
  }
  
  sub build_line {
      my ($self, $spt) = @_;
      my $out_str = colored(sprintf("%s ", $spt x $self->{width}), "blue");
      for my $group (@{$self->{groups}}) {
          $out_str .= $group->line($spt);
      }
      return ("$out_str\n");
  }
  
  sub build_body {
      my ($self, $instance, $stats, $prev_stats) = @_;
      my $format = "%" . $self->{width} . "s%s";
      my $out_str = sprintf($format, $instance, $self->separator);
      for my $group (@{$self->{groups}}) {
          $out_str .= $group->body($stats, $prev_stats);
  
          # stash total count
          my @values = $group->stat_values($stats, $prev_stats);
          my $key    = $group->{group};
          my $total_values = $self->{summary}->{$key} || [];
          for (my $i = 0; $i < scalar @values; $i++){
              $total_values->[$i] ||= 0;
              $total_values->[$i] += $values[$i];
          }
          $self->{summary}->{$key} = $total_values;
      }
      return ("$out_str\n");
  }
  
  sub build_average {
      my ($self) = @_;
      my $instance_count = scalar @{$self->{instances}};
  
      my $format = "%" . $self->{width} . "s%s";
      my $out_str = colored(sprintf($format, 'AVERAGE', $self->separator), "bold");
      for my $group (@{$self->{groups}}) {
          my $key   = $group->{group};
          $out_str .= $group->average($self->{summary}->{$key}, $instance_count);
      }
      return ("$out_str\n");
  }
  
  sub build_total {
      my ($self) = @_;
      my $format = "%" . $self->{width} . "s%s";
      my $out_str = colored(sprintf($format, 'TOTAL', $self->separator), "bold");
      for my $group (@{$self->{groups}}) {
          my $key   = $group->{group};
          $out_str .= $group->total($self->{summary}->{$key});
      }
      return ("$out_str\n");
  }
  
  sub run {
      my ($self) = @_;
  
      # init total
      $self->{summary} = {};
  
      my @lines;
      # build header
      push @lines, $self->build_title;
      push @lines, $self->build_header;
      push @lines, $self->build_sub_header;
      push @lines, $self->build_line('-');
  
      # instances loop
      foreach my $instance (@{$self->{instances}}) {
          my ($server, $port) = split(/:/, $instance);
          my $stats = $self->redis_info($server, $port);
          push @lines, $self->build_body(
              $instance,
              $stats,
              $self->{prev_stats}->{$instance} || {},
          );
          $self->{prev_stats}->{$instance} = $stats;
      }
  
      # average
      push @lines, $self->build_line(' ');
      push @lines, $self->build_average();
      # total
      push @lines, $self->build_line(' ');
      push @lines, $self->build_total();
  
      print join('', @lines);
  }
  
  1;
APP_REDISTOP_PERFORM

s/^  //mg for values %fatpacked;

unshift @INC, sub {
  if (my $fat = $fatpacked{$_[1]}) {
    if ($] < 5.008) {
      return sub {
        return 0 unless length $fat;
        $fat =~ s/^([^\n]*\n?)//;
        $_ = $1;
        return 1;
      };
    }
    open my $fh, '<', \$fat
      or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
    return $fh;
  }
  return
};

} # END OF FATPACK CODE
#!perl

use strict;
use warnings;
use IO::Socket;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat bundling);
use Pod::Usage qw(pod2usage);

use App::RedisTop::Perform;
use App::RedisTop::Component::CPU;
use App::RedisTop::Component::Memory;
use App::RedisTop::Component::Connection;
use App::RedisTop::Component::Save;
use App::RedisTop::Component::Command;
use App::RedisTop::Component::DB;

#################################
# main
#################################
package main;

my %groups = (
    cpu     => { class => App::RedisTop::Component::CPU->new(),         sort => 1, },
    memory  => { class => App::RedisTop::Component::Memory->new(),      sort => 2, },
    conn    => { class => App::RedisTop::Component::Connection->new(),  sort => 3, },
    save    => { class => App::RedisTop::Component::Save->new(),        sort => 4, },
    command => { class => App::RedisTop::Component::Command->new(),     sort => 5, },
    db      => { class => App::RedisTop::Component::DB->new(dbid => 0), sort => 6, },
);

sub main {
    my $opt = +{};

    GetOptions(
        'c|cpu'         => \$opt->{cpu},
        'M|memory'      => \$opt->{memory},
        'n|conn'        => \$opt->{conn},
        's|save'        => \$opt->{save},
        'C|command'     => \$opt->{command},
        'd|db'          => \$opt->{db},
        'i|instances=s' => \$opt->{instances},
        'sleep=i'       => \$opt->{sleep},
        'nocolor'       => \$opt->{nocolor},
        'h|help'        => \$opt->{help},
    );

    pod2usage 1 if $opt->{help};

    my $sleep     = $opt->{sleep} || 3;
    my @instances = ($opt->{instances}) ? split(/,/, $opt->{instances}) : ('127.0.0.1:6379');
    $ENV{ANSI_COLORS_DISABLED} = 1 if $opt->{nocolor};

    # group specified
    my @sp_groups;
    for my $key (sort{ $groups{$a}->{'sort'} <=> $groups{$b}->{'sort'}} keys %groups) {
        push @sp_groups, $groups{$key}->{class} if $opt->{$key};
    }

    # default
    if(scalar @sp_groups == 0) {
        push @sp_groups, $groups{$_}->{class} for qw/cpu memory conn save command db/;
    }

    my $perform = App::RedisTop::Perform->new(
        groups    => \@sp_groups,
        instances => \@instances,
    );
    while(1) {
        $perform->run;
        sleep($sleep);
    }
}

main();

__END__

=head1 NAME

redis-top - Redis resource statistics tool.

=head1 DESCRIPTION

Redis resource statistics tool.

=head1 USAGE

redis-top [options]

=head2 Example

=over 4

=item redis-top -i 127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382

=item redis-top --sleep 1 --nocolor --cpu --memory --db

=item redis-top -cMnsCd  # full

=back

=head1 OPTIONS

=head2 GROUP OPTIONS

=over 4

=item -c,--cpu

enable cpu stats

=item -M,--memory

enable memory stats

=item -n,--conn

enable connection stats

=item -s,--save

enable save stats

=item -C,--command

enable command stats

=item -d,--db

enable db stats (default:db0 stats)

=back

=head2 GLOBAL OPTIONS

=over 4

=item --sleep

sleep time (default:3)

=item --nocolor

disable colors

=item -h --help

show help

=back

=cut

